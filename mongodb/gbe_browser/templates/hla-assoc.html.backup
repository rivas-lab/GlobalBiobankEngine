{% extends "layout.html" %}
{% block head %}
<!-- Plotly example 1
Yosuke Tanigawa
2017/11/14
The description is in README.md
-->

<!--
    title tag is in layout.html
    <title>HLA Haplotypes ()</title>
-->
<!--
    I (Yosuke) will remove this as we have already included from layout.html.
    However, that is JQuery 1.11.1 for some reason. We may need to update the dependencies.
-->
<!--    <script src="https://code.jquery.com/jquery-3.2.1.min.js"></script> -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-csv/0.71/jquery.csv-0.71.min.js"></script>
<!--    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-csv/0.8.3/jquery.csv.js"></script> -->
<!--
    <script type="text/javascript" src="https://d3js.org/d3.v3.min.js"></script>
-->    
    <!-- Plotly.js -->
    <script type="text/javascript" src="https://cdn.plot.ly/plotly-latest.min.js"></script> 
    
    <script>        
        var genes = ["A", "B", "C","DPA1","DPB1","DQA1","DQB1","DRB1","DRB3","DRB4","DRB5"];
        var phe_folder = "/static/hla-assoc/hap_post_plot/"
 function plotly_from_csv_callback(csv_string, plotDivName, label_col_idx, gene, phe_dict, disease_dict, hla_name_dict){
            var csv_array_of_cols=$.csv.toArrays(csv_string);

            // change to literature allele names
            var labels = csv_array_of_cols[label_col_idx];            
            for (var i = 0; i < labels.length; i++) {
              labels[i] = hla_name_dict[labels[i]];
            }
            
            //Create set of points for each phenotype
            var x = d3.range(1, 1 + labels.length);
            var data = [];
            var trace;
            for (var i = 1; i < csv_array_of_cols["length"]; i++) {
              var x_noise = x.slice(0,x.length);

              // add jitter (there will be 0.5 space where there are points and then a 0.5 break)
              for (var j = 0; j < x_noise.length; j++) {
                var sign = Math.random();
                if (sign < 0.5) {
                  sign = -1;
                } else {
                  sign = 1;
                }
                x_noise[j] = x_noise[j] + sign*Math.random()*0.25;
              }
              var y = csv_array_of_cols[i];
              y = y.slice(1,);
              y.unshift("");

              // Create hover text
              var new_text = [];
              for (var k = 0; k < x.length; k++) {
                new_text.push("post prob: " + y[k] + "<br>" + "hap: " + labels[k] + "<br>" + "pheno: " + phe_dict[csv_array_of_cols[i][0]]);
              }
              trace = {
                'x': x_noise, 'y': y, 
                type: 'scattergl', 'mode': 'markers',
                name: phe_dict[csv_array_of_cols[i][0]],

                text: new_text,
                hoverinfo: "text"
              }
              data.push(trace);
            }

            var layout = {
                hovermode:'closest',
                hoverinfo: "text",
                showlegend: false,
                title: "Posterior probabilities of HLA-" + gene + " alleles for " + csv_array_of_cols["length"] + " phenotypes",
				  xaxis: {
				    tickangle: 45,
                  showticklabels: true,
                  tickmode: "array",
                  ticks: "", 
                  ticktext: labels,
                  tickvals: x
				  },
                yaxis: {
                  title: "posterior probability",
                  range: [-0.1,1.1]
                }
            };

            Plotly.newPlot(plotDivName, data, layout); 
            myPlot = document.getElementById(plotDivName); 
            
            // Go to GBE page for given phenotype on click
            myPlot.on('plotly_click', function(data){
              window.open("https://biobankengine.stanford.edu/coding/" + disease_dict[data.points[0].data.name]);
            });
              

        } 
        
        function plotly_from_csv(csv_file, plotDivName, label_col_idx, gene, phe_dict, disease_dict, hla_name_dict) {

            $.ajax({
                url: csv_file,
                dataType: 'text',
            }).done(
                text => plotly_from_csv_callback(
                    text, plotDivName, label_col_idx, gene, phe_dict, disease_dict, hla_name_dict
                )
            );
        }

        function odds_plot(csv_file, hap, thresh, phe_dict, hla_name_dict, disease_dict) {
          var sig_phes = [];
          var phe_names = [];

          // find significant phenotypes by posterior probability
          d3.csv(csv_file, function(data) {
            for (var i = 0; i < data.length; i++) {
              if (data[i][hap] > thresh) {
                phe_names.push(phe_dict[data[i][""]]);
                sig_phes.push(i);
              } 
            }
          });
            // find associated odds values
            var odds = [];
            d3.csv(phe_folder + "phe_hap_table_EV.csv", function(data) {            
              for (var i = 0; i < sig_phes.length; i++) {
	      // take exp(odds)
                odds.push(data[sig_phes[i]][hap]);
              }
            });

            // find associated standard deviations
            var SDs = [];
            d3.csv(phe_folder + "phe_hap_table_SD.csv", function(data) {
            for (var i = 0; i < sig_phes.length; i++) {
              // multiply to get 95% confidence interval
              SDs.push(data[sig_phes[i]][hap] * 1.959);
            }
            // create plot
            odds_plot_callback(odds,SDs, phe_names, thresh, hap, hla_name_dict, disease_dict);
          });            
      }

      function odds_plot_callback(odds, SDs, phe_names, thresh, hap, hla_name_dict, disease_dict) {
           var y = [];
            for (var i = 1; i < odds.length + 1; i++) {
              y.push(i);
            }
 var new_text = [];
 
             // keep track of biggest value for setting range
             // (range will always be >= [-2,2])
             var abs_max = 2;
             for (var k = 0; k < odds.length; k++) {
               
               var odds_minus = round_2(odds[k] - SDs[k]);
               var odds_plus = round_2(parseFloat(odds[k]) + SDs[k]);
               var exp_minus = round_2(Math.pow(Math.E,odds[k] - SDs[k]));
               var exp_plus = round_2(Math.pow(Math.E,parseFloat(odds[k]) + SDs[k]));
               if (Math.abs(odds_minus) > abs_max) {
                 abs_max = Math.abs(odds_minus);
               }
               if (Math.abs(odds_plus) > abs_max) {
                 abs_max = Math.abs(odds_plus);
               }
               new_text.push("log(odds ratio): " + round_2(odds[k]) + ", (" + odds_minus + "," + odds_plus + ")" + "<br>odds ratio: " + round_2(Math.pow(Math.E,odds[k])) + ", (" + exp_minus + "," + exp_plus + ")"  + "<br>" + "pheno: " + phe_names[k]);
             }
             abs_max += 0.1;
            // create data
            var data  = [
              {
                'x': odds, 'y': y,
                 type: 'scatter', 'mode': 'markers',
	          text: new_text,
                  hoverinfo: "text", 
                error_x: {
                  type: 'data',
                  array: SDs,
                  visible: true,
                 }
              }
            ];
            var layout  = {
              hovermode: 'closest',
              title: "Posterior log(odds ratios) for phenotypes with posterior probability >" + thresh + " for " + hla_name_dict[hap],
              hoverinfo: 'text',
              margin: {
                l: 300
              },
              yaxis: {
                showgrid: false,
                showticklabels: true,
                tickmode: "array",
                ticks: "", 
                ticktext: phe_names,
                tickvals: y

              },
              xaxis: {
                title: "posterior effect size",
                range: [-abs_max,abs_max]
              }
            };
            Plotly.newPlot('plotly_div', data, layout);        
      
      /*
            myPlot = document.getElementById('plotly_div'); 
            
            // Go to GBE page for given phenotype on click
            myPlot.on('plotly_click', function(data){
              console.log("data: " + JSON.stringify(data));
              window.open("https://biobankengine.stanford.edu/coding/" + disease_dict[data.points[0].data.name]);
            
            });
            */
            
          }
function round_2(x) {
         return Math.round(x * 100)/100;
       }

      function draw_buttons(gene, thresh, hla_name_dict, disease_dict) {

        // delete all current buttons
        var myNode = document.getElementById("buttons_0");
        while (myNode.firstChild) {
            myNode.removeChild(myNode.firstChild);
        }

        // find all alleles that have probabilities above the threshold
        var labels; 
        var include_haps = [];
        d3.csv(phe_folder + 'phe_post_table_' + gene + '.csv', function(data) {
          labels = Object.keys(d3.values(data)[0]).slice(1,);
          for (var j = 0; j < labels.length; j++){
            var include = false;
            for (var i = 0; i < data.length; i++) {
              if (data[i][labels[j]] > thresh){
                include = true;
              }
            }
            if (include) {
              include_haps.push(labels[j]);
            }
          }

          // add a button for each of these alleles
          var button;
          for (var i=0; i<include_haps.length; i++) {
            button = document.createElement('button');
            button.innerHTML = hla_name_dict[include_haps[i]];
            button.id = include_haps[i];
            button.addEventListener('click', function() {
              console.log("gene: " + gene);
              odds_plot(phe_folder + 'phe_post_table_' + gene + '.csv', this.id, thresh, phe_dict, hla_name_dict, disease_dict);
            });
            document.getElementById('buttons_0').appendChild(button);
          }
        });
      }
       
      // create dictionaries to convert names of phenotypes and alleles 
      var phe_dict = {};
      var disease_dict = {};
      d3.csv("/static/hla-assoc/highconfidenceqc_map.csv", function(data) {
        for (var i = 0; i < data.length; i++) {
          phe_dict[data[i].code] = data[i].disease;
          disease_dict[data[i].disease] = [data[i].code];
        }
      });
     d3.csv("/static/hla-assoc/cancermap.csv", function(data) {
        for (var i = 0; i < data.length; i++) {
          phe_dict[data[i].code.toString()] = data[i].disease;
          disease_dict[data[i].disease] = [data[i].code.toString()];
        }
      });
      var hla_name_dict = {};
      d3.csv("/static/hla-assoc/ukb_to_asterisk_names.csv", function(data){
        for (var i = 0; i < data.length; i++) {
          hla_name_dict[data[i].ukb_names] = data[i].literature_names;
        }
      });

        // start with plot from first gene
        $(document).ready(function () {
          plotly_from_csv(phe_folder + 'phe_post_table_' + genes[0] + '.csv', 'plotly_div',  0, genes[0], phe_dict, disease_dict, hla_name_dict);
        });
    </script>

{% endblock %}


{% block body %}
<div class="container" style="font-size: 16px;">
    <div class="row">
        <div class="col">            
            <h1>HLA Disease Map</h1>
            <h5>Version 0.01</h5>
            <p>Julia Eve Olivieri, Chris M. DeBoever, Yosuke Tanigawa and Manuel A. Rivas</p>
            <p>J.E.O. developed the web application. M.A.R designed the study.</p>
        </div>
    </div>
    
    <div class="row">
        <div class="col col-md-12">
            <div id='plots'></div>
        </div>
    </div>
    
    <div class="row">
        <div class="col col-md-12">
            <div id='odd_plot'></div>
        </div>
    </div>
      
  
  
  <script> 
    var container = document.getElementById("plots");
    container.innerHTML += '<div id="plotly_div"></div>';

  </script>
    
    <div class="row">
        <div class="col col-md-12">    
            <h2>Alleles</h2>
            <div id='buttons_0'></div>            
        </div>
    </div>
            
    <script>
// set threshold for including phenotype in odds plot 
    thresh = 0.7;
    draw_buttons(genes[0], thresh, hla_name_dict, disease_dict);
    </script>
    
    <div class="row">
        <div class="col col-md-12">    
            <h2>Class I</h2>
            <div id='buttons_1'></div>
        </div>
    </div>

    <div class="row">
        <div class="col col-md-12">    
            <h2>Class II</h2>
            <div id='buttons_2'></div>
        </div>
    </div>
    
  
  <script>
// create gene buttons
    var class_1 = genes.slice(0,3);
    var button;
    for (var i=0; i<class_1.length; i++) {
      button = document.createElement('button');
      button.innerHTML = "HLA-" + class_1[i];
      button.id = class_1[i];
      button.addEventListener('click', function() {
        plotly_from_csv(phe_folder + 'phe_post_table_' + this.id + '.csv', 'plotly_div',  0, this.id, phe_dict, disease_dict, hla_name_dict);
        gene = this.id;
        draw_buttons(this.id, thresh, hla_name_dict, disease_dict);
      });
      document.getElementById('buttons_1').appendChild(button);
    }
    var class_2 = genes.slice(4,);
    var button;
    for (i=0; i<class_2.length; i++) {
    button = document.createElement('button');
    button.innerHTML = "HLA-" + class_2[i];
    button.id = class_2[i];
    button.addEventListener('click', function() {
      plotly_from_csv(phe_folder + 'phe_post_table_' + this.id + '.csv', 'plotly_div',  0, this.id, phe_dict, disease_dict, hla_name_dict);
      draw_buttons(this.id, thresh, hla_name_dict, disease_dict);
    });
    document.getElementById('buttons_2').appendChild(button);
}
    </script>
 <div class="row">
        <div class="col">
            <h2 align="center">Video Tutorial for HLA Disease Map</h2>
            <p>
                Julia explains the HLA Disease Map app and teaches viewers how to interpret the plots using examples.
           </p>
           <iframe width="600" height="450" src="https://www.youtube.com/embed/LVe6H37ZuB8" frameborder="0" allowfullscreen></iframe> 
        </div>
    </div>


</div>
{% endblock %}

